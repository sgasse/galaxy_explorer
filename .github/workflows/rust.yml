name: Rust CI

on:
  push:
    branches: ["main"]
    tags: ["*"]
    paths-ignore: ["**.md"]
  pull_request:
    branches: ["main"]
    paths-ignore: ["**.md"]

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create ${{ github.ref_name }}

  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Linux
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            command: cargo

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install bevy dependencies
        shell: bash
        run: |
          sudo apt-get install clang pkg-config libx11-dev libasound2-dev libudev-dev libxkbcommon-x11-0

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build binary
        run: ${{ matrix.command }} build --release --target ${{ matrix.target }}

      - name: Create archive
        if: startsWith(github.ref, 'refs/tags/')
        id: archive
        shell: bash
        run: |
          DIRECTORY="galaxy-explorer-${{ github.ref_name }}-${{ matrix.target}}"
          mkdir "${DIRECTORY}"
          cp target/${{ matrix.target }}/release/color_picker "${DIRECTORY}/"
          cp target/${{ matrix.target }}/release/viewer_sp "${DIRECTORY}/"
          7z a "${DIRECTORY}.zip" "${DIRECTORY}"
          echo "path=${DIRECTORY}.zip" >> ${GITHUB_OUTPUT}

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.ref_name }} ${{ steps.archive.outputs.path }}

  wasm_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install bevy dependencies
        shell: bash
        run: |
          sudo apt-get install clang pkg-config libx11-dev libasound2-dev libudev-dev libxkbcommon-x11-0

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "wasm32-unknown-unknown"

      - name: Install wasm-bindgen
        shell: bash
        run: |
          cargo install wasm-bindgen-cli

      - name: Build for wasm32
        shell: bash
        run: |
          cargo build --bin galaxy_viewer --release --target wasm32-unknown-unknown

      - name: Generate bindings
        shell: bash
        run: |
          wasm-bindgen \
            --no-typescript \
            --target web \
            --out-dir ./www/ \
            --out-name "galaxy_viewer" \
            ./target/wasm32-unknown-unknown/release/galaxy_viewer.wasm

      - name: List output
        shell: bash
        run: |
          ls -la www
